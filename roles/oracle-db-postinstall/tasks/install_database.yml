---
# 
# installation des binaires ORACLE
#

  - name: Création du répertoire oracle
    file: dest={{ item }} mode=775 owner=oracle group=oinstall state=directory recurse=yes
    with_items:
      - "{{ oracle_base }}"
      - "{{ oracle_inventory }}"
      - "{{ oracle_home }}"
      - "{{ oracle_sources }}"
    tags: createdir

  - name: vérification de l espace disque disponible sur oracle_base
    action: shell df -P {{ oracle_base }} | awk 'END { print $4 }'
    register: u01size
    failed_when: u01size.stdout|int < u01_free_space_gb*1024*1024
    tags: diskfreespace

  - name: vérification de l espace disque disponible sur /tmp
    action: shell df -P /tmp | awk 'END { print $4 }'
    register: tmpsize
    failed_when: tmpsize.stdout|int < tmp_free_space_gb*1024*1024
    tags: diskfreespace



  - name: Modification du prompt SQLPlus
    copy: src=login.sql dest=/home/oracle mode=644 owner=oracle group=oinstall
    tags: login.sql

  - name: Ajout de la variabe ORACLE_PATH ans .bash_profile
    lineinfile: path=/home/oracle/.bash_profile line="export ORACLE_PATH=/home/oracle" create=yes
    tags: oraclepath

  - name: Récupération des ORACLE_HOME ..
    shell: cat {{ orainventoryloc.stdout }} |  grep "HOME NAME" | cut -d' ' -f3 | cut -d= -f2 | sed 's/"//g'
    register: oracle_home
    failed_when: oracle_home.stdout == ""
    tags: getoraclehome




  - name: Copie du fichier de réponse pour installation silencieuse
    template: src=db_install_{{ oracle_version }}.j2 dest={{ oracle_sources }}/{{ db_response_file }}
    tags: responsefile

  - name: Création du script d installation silencieuse
    template: src=run_db_install.sh.j2 dest={{ oracle_sources }}/run_db_install.sh mode=755
    tags: responsefile


  - name: Installation des binaires Oracle
    shell: "{{ oracle_sources }}/run_db_install.sh"
    register: oradbinstall
    become: true
    become_method: su
    become_user: oracle
    ignore_errors: true
    tags: orainstall

  - debug: var=oradbinstall.stdout_lines
    # with_items: oradbinstall.results
    tags: orainstall

  - name: Vérification de l existance du fichier orainstRoot.sh
    stat: path="{{ oracle_inventory }}/orainstRoot.sh"
    register: orainstRoot

  - name: Exécution du script orainstRoot.sh
    shell: "{{ oracle_inventory }}/orainstRoot.sh"
    when: orainstRoot.stat.exists
    tags: runroot

  - name: Exécution du script root.sh
    shell: "{{ oracle_home }}/root.sh"
    tags: runroot

  - name: Résultat de l installation via OPatch
    shell: "{{ oracle_home }}/OPatch/opatch lsinventory"
    become: true
    become_method: su
    become_user: oracle
    register: opatchls
    tags: opatch

  - debug: var=opatchls.stdout_lines
    # with_items: opatchls.results
    tags: opatch

  # suppression des binaires, du fichier de réponse et du script d'install
#  - name: suppression du repertoire des fichiers decompressés
#    file: path={{ oracle_sources }}/database state=absent
#
#  - name: suppression du fichier de réponse
#    file: path={{ oracle_sources }}/{{ db_response_file }} state=absent
#
#  - name: suppression du script d'installation
#    file: path={{ oracle_sources }}/run_db_install.sh state=absent

